@using System.Diagnostics
@using BeautyManager.Shared.Models.Db
@using BeautyManager.Web.Models
@using BeautyManager.Web.Utils
@inject IJSRuntime JsRuntime
@inject BookCancelValidator BookCancelValidator;
@inject ErrorMessage ErrorMessage;

<div class="modal fade" id="@_id" tabindex="-1" aria-labelledby="@IdLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content glass border-0">
            <div class="modal-header border-0">
                <h5 class="modal-title fw-bold" id="@IdLabel">@Title</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="OnCloseClicked"></button>
            </div>

            <div class="modal-body">
                <div class="mb-3">
                    <label for="@InputId" class="form-label fw-semibold">Cancellation code</label>
                    <InputText id="@InputId" class="form-control form-control-lg rounded-3"
                               @bind-Value="CancellationInput" placeholder="@_placeholder"/>
                </div>

                @if (ErrorMessage.IsErrorOccured)
                {
                    <div class="text-danger small mb-2">@ErrorMessage.Message</div>
                }

                <div class="text-muted small">Enter the code you received when booking to cancel your appointment.</div>
            </div>

            <div class="modal-footer border-0 pt-0">
                <button class="btn btn-outline-secondary rounded-pill px-4" @onclick="()=>SetIsShown(false)">Close
                </button>
                <button class="btn btn-danger rounded-pill px-4" @onclick="SubmitAsync">Cancel booking</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string _id { get; set; } = "cancellationModal";

    [Parameter] public string Title { get; set; } = "Cancel booking";

    private string _placeholder { get; set; } = "Enter cancellation code";

    [Parameter] public BeautyBook BookToCancel { get; set; }

    [Parameter]
    public bool Show
    {
        get;
        set
        {
            if (field == value) return;
            field = value;
            OnShowingValueChanged(value);
        }
    }

    [Parameter] public EventCallback<bool> ShowChanged { get; set; }

    // When user submits, the parent receives the entered code (string) and can perform validation/removal
    [Parameter] public EventCallback<BeautyBook> OnSubmit { get; set; }

    private string CancellationInput { get; set; } = string.Empty;

    private string InputId => _id + "_input";
    private string IdLabel => _id + "Label";

    private async Task SetIsShown(bool isShown)
    {
        Show = isShown;
        await ShowChanged.InvokeAsync(isShown);
    }

    private async Task OnShowingValueChanged(bool shouldShow)
    {
        if (shouldShow)
        {
            await ShowModalAsync();
            return;
        }

        await HideModalAsync();
    }

    private async Task ShowModalAsync()
    {
        await JsRuntime.InvokeVoidAsync("showModal", _id);
    }

    private async Task HideModalAsync()
    {
        await JsRuntime.InvokeVoidAsync("hideModal", _id);
    }

    private async Task SubmitAsync()
    {
        ErrorMessage.IsErrorOccured = false;
        if (string.IsNullOrWhiteSpace(CancellationInput))
        {
            ErrorMessage.Message = "Please enter the cancellation code.";
            return;
        }

        ErrorMessage validationError = BookCancelValidator.ValidateCancellation(CancellationInput, BookToCancel, ErrorMessage);
        if (validationError.IsErrorOccured)
            return;

        await OnSubmit.InvokeAsync(BookToCancel);
        
        // close and clear
        await SetIsShown(false);
        CancellationInput = string.Empty;
        await InvokeAsync(StateHasChanged);
    }

    private async Task CloseAsync()
    {
        CancellationInput = string.Empty;
        await SetIsShown(false);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnCloseClicked()
    {
        await CloseAsync();
    }

}
