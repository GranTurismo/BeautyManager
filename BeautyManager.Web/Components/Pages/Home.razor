@page "/"
@using System.Collections.Immutable
@using System.Text.Json
@using BeautyManager.Shared
@using BeautyManager.Shared.Connection
@using BeautyManager.Shared.Models.Db
@using BeautyManager.Shared.Models.Local
@inject BeautyDbContext DbCon;
@inject IJSRuntime JsRuntime;

<div class="container py-5">
    <h2 class="mb-4 fw-bold" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; font-size: 2.5rem;">Today's Working Cards</h2>
    <div class="d-flex gap-3 mb-4">
        <button @onclick="()=>Next(-1)" class="btn btn-outline-primary rounded-pill px-4 py-2 shadow-sm d-flex align-items-center gap-2">
            <i class="bi bi-arrow-left-circle fs-5"></i>
            Previous Day
        </button>
        <button @onclick="()=>Next(1)" class="btn btn-outline-primary rounded-pill px-4 py-2 shadow-sm d-flex align-items-center gap-2">
            <i class="bi bi-arrow-right-circle fs-5"></i>
            Next Day
        </button>
    </div>
    <div class="row g-4 justify-content-center">
        @if (_workingCards.Count > 0)
        {
            @foreach (WorkingCard card in _workingCards)
            {
                if (!card.IsPassed)
                {
                    <div class="col-12 col-sm-6 col-md-4 col-lg-3"
                         data-bs-toggle="modal"
                         data-bs-target="#modalSelectTask"
                         @onclick="() => OnCardClick(card)">
                        <div class="card shadow-sm border-0 h-100">
                            <div class="card-body d-flex flex-column justify-content-between">
                                <h5 class="card-title text-secondary mb-2">@card.StartDate.ToString("MMMM dd, yyyy")</h5>
                                <p class="card-text fs-5 mb-1">
                                    <span class="badge bg-primary">@card.StartDate.ToString("hh:mm tt")</span>
                                </p>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-12 col-sm-6 col-md-4 col-lg-3 opacity-50">
                        <div class="card shadow-sm border-0 h-100">
                            <div class="card-body d-flex flex-column justify-content-between">
                                <h5 class="card-title text-secondary mb-2">@card.StartDate.ToString("MMMM dd, yyyy")</h5>
                                <p class="card-text fs-5 mb-1">
                                    <span class="badge bg-primary">@card.StartDate.ToString("hh:mm tt")</span>
                                </p>
                            </div>
                        </div>
                    </div>
                }
            }
        }
        else
        {
            <div class="col-12">
                <div class="alert alert-info">No working cards found for today.</div>
            </div>
        }
    </div>
</div>

<div class="modal fade"
     id="modalSelectTask"
     tabindex="-1" style="background:rgba(0,0,0,0.5);" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow-lg border-0 rounded-4">
            <div class="modal-header border-0 pb-0">
                <h3 class="modal-title fw-bold text-primary">Select Task
                    for @(_selectedCard.StartDate.ToString("hh:mm"))</h3>
            </div>
            <div class="modal-body">
                <label class="form-label mb-2" for="taskSelect">Task:</label>
                <InputSelect id="taskSelect" class="form-select form-select-lg rounded-3" @bind-Value="_selectedTaskId">
                    @foreach (BeautyTask task in _beautyTasks)
                    {
                        <option value="@task.Id">@task.TaskTitle</option>
                    }
                </InputSelect>

                <label class="form-label mt-2 fw-semibold text-secondary">
                    <i class="bi bi-clock-history me-2"></i>
                    Duration: <span
                        class="badge bg-info text-dark fs-6">@(_beautyTasks.First(o => o.Id == _selectedTaskId).TaskDuration.ToString("HH\\:mm"))</span>
                </label>
                <div class="mb-3">
                    <label for="customerName" class="form-label fw-semibold text-secondary">
                        <i class="bi bi-person-circle me-2"></i>Your name:
                    </label>
                    <InputText id="customerName" class="form-control form-control-lg rounded-3"
                               @bind-Value="@_customerName" placeholder="Enter your name"/>
                </div>
                <div class="mb-3">
                    <label for="inputNumber" class="form-label fw-semibold text-secondary">
                        <i class="bi bi-telephone me-2"></i>Your phone:
                    </label>
                    <InputText id="inputNumber" class="form-control form-control-lg rounded-3"
                               @bind-Value="_inputNumber" placeholder="Enter your phone number"/>
                </div>
                <div class="modal-footer border-0 pt-0">
                    <button type="button" @onclick="Book" class="btn btn-primary rounded-pill px-4">Save
                    </button>
                    <button type="button" id="cancel" class="btn btn-outline-secondary rounded-pill px-4"
                            data-bs-dismiss="modal">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code{
    private string _inputNumber { get; set; }
    private string _customerName;
    private int _selectedTaskId;
    private WorkingCard _selectedCard;

    ImmutableList<BeautyTask> _beautyTasks;

    DateTime _startDate = new(DateTime.UtcNow.Year, DateTime.UtcNow.Month,
        1, Constants.OpeningTime.Hour, Constants.OpeningTime.Minute, 0);

    ImmutableList<WorkingCard> _workingCards;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _workingCards = WorkingCard.GetCardsForDay(_startDate).ToImmutableList();
        _beautyTasks = DbCon.BeautyTasks.ToImmutableList();
        _selectedTaskId = _beautyTasks.First().Id;
        _selectedCard = _workingCards.First();
    }

    private void OnCardClick(WorkingCard card)
    {
        _selectedCard = card;
    }

    private async Task Book()
    {
        BeautyTask selectedTask = _beautyTasks.First(o => o.Id == _selectedTaskId);
        BeautyBook book = new()
        {
            CustomerName = _customerName,
            CustomerPhone = _inputNumber,
            ExecutingDate = _selectedCard.StartDate,
            OrderDate = DateTimeOffset.UtcNow,
            Task = new()
            {
                TaskDuration = selectedTask.TaskDuration,
                TaskTitle = selectedTask.TaskTitle,
            }
        };
        Console.WriteLine(JsonSerializer.Serialize(book));
        await CloseModal();
    }

    private async Task CloseModal()
    {
        await JsRuntime.InvokeVoidAsync("closeModal", "cancel");
    }

    private void Next(int daysCount)
    {
        _startDate = _startDate.AddDays(daysCount);
        _workingCards = WorkingCard.GetCardsForDay(_startDate).ToImmutableList();
    }

}